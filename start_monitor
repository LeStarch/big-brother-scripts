#!/bin/bash

jackloop() {
  while [ true ]; do
    setsid jackd -d alsa
    sleep 1
  done
}

start_monitor() {
    echo "Starting the audio monitor"
    COUNT=1
    CHANNELS=
    while [ $COUNT -le $ROOMCOUNT ] ; do
        CHANNELS="$CHANNELS $COUNT"
        COUNT=`expr $COUNT + 1`
    done

    meterbridge -t dpm -n Meters $CHANNELS
}

checkurl()
{
  curl=`curl -f -s -I http://$1 2> /dev/null`
  retval=$?
  while [ $retval -ne 0 ]; do
    curl=`curl -f -s -I http://$1 2> /dev/null`
    retval=$?
    echo "in loop"
  done
}

playvideo()
{
  if [ ! -d log ] ; then
    mkdir log
  fi
  while [ true ] ; do
    # /usr/bin/vlc --no-osd --qt-minimal-view --audio-track=1 --vout xvideo http://$1.scaleav.us:8080/mixed --video-title "$3" --aout jack 2>> log/$1.err > log/$1.log &
    /usr/bin/vlc --no-osd --qt-minimal-view --audio-track=1 --vout opengl http://$1.scaleav.us:8080/mixed --video-title "$3" --aout jack 2>> log/$1.err > log/$1.log &
    sleep 2
    RETVAL=$?
    pid=$!
    if [ $RETVAL ] ; then
      dev=""
      while [ "$dev" == "" ] ; do
        dev=`jack_lsp vlc_${pid}:`
        ##dev=`jack_lsp "MPlayer [${pid}]:"`
      done

      running=1
      while [ $running -gt 0 ] ; do
        for d in $dev ; do
          jack_connect "$d" "Meters:meter_$2"
        done
        for d in $dev ; do
          #echo "jack_disconnect $d system:playback_1" >> ~/monitor_all.log
          jack_disconnect "$d" system:playback_1
          jack_disconnect "$d" system:playback_2
        done
        sleep 1
        running=`jack_lsp vlc_${pid}: | wc -l`
        #running=`jack_lsp "MPlayer [${pid}]:" | wc -l`
        #running=`pgrep vlc | grep $pid | wc -l`
        #if [ $running -gt 0 ] ; then
        #  running=`jack_lsp vlc_${pid}: | wc -l`
        #fi
      done
      kill $pid
    fi
  done
}

monitor_all() {
    ./i3-ipc -s /tmp/i3-$(whoami)/ipc-socket.$(ps aux | grep "i3$" | awk '{ print $2}') "split v"

    win_num=1
    for room in $(cat roomlist); do
        playvideo $room $win_num $room &
        win_num=$(expr $win_num + 1)
#TODO: remove when xvideo functionality is restored
sleep 10
    done
}

set -xv

./stop_monitor
./setup_monitor

ROOMCOUNT=`cat roomlist | wc -l`
ROOMCOUNT=`expr $ROOMCOUNT + 2`

# Make sure we are running on the console
if [ -z "$DISPLAY" ] ; then
    echo "DISPLAY variable not set, are you on the console?"
    exit 4
fi

# Set up our log folder
LOGSDIR=log
if [ ! -d $LOGSDIR ] ; then mkdir $LOGSDIR ; fi

echo "Starting the audio monitor"
jackloop >> $LOGSDIR/jackd.stdout 2>> $LOGSDIR/jackd.stderr &
sleep 3
start_monitor > $LOGSDIR/meterbridge.stdout 2> $LOGSDIR/meterbridge.stderr &

dev=`/usr/bin/jack_lsp Meters:monitor_1`
echo "Waiting for jack Meters:monitor_1 to manifest"
set +xv
while [ "$dev" == "" ] ; do
  dev=`/usr/bin/jack_lsp Meters:monitor_1`
  # sleep 0.4
done
set -xv

# Believed to assign global monitoring chanels
CHAN1=`expr $ROOMCOUNT - 1`
CHAN2=$ROOMCOUNT
/usr/bin/jack_connect Meters:monitor_$CHAN1 system:playback_1 >> $LOGSDIR/setup_audio.stdout 2>> $LOGSDIR/setup_audio.stderr
/usr/bin/jack_connect Meters:monitor_$CHAN2 system:playback_2 >> $LOGSDIR/setup_audio.stdout 2>> $LOGSDIR/setup_audio.stderr

bin/follow-sound >> $LOGSDIR/follow-sound.stdout 2>> $LOGSDIR/follow-sound.stderr &

echo "Starting the video monitors"
jack_lsp 2> /dev/null
retval=$?
if [ $retval -eq 1 ] ; then
  echo "Jack not Running, or not correct User."
  exit
fi
monitor_all >> $LOGSDIR/monitor_all.stdout 2>> $LOGSDIR/monitor_all.stderr

# Auto position the windows starting in the upper left of the combined monitors
DISPLAYHEIGHT=`xrandr | head -1  | sed -e 's/, max.*//' -e 's/.* //'`
TITLEHEIGHT=40
WINHEIGHT=`expr $DISPLAYHEIGHT / 3` # Display windows three-up
WINWIDTH=`expr $WINHEIGHT \* 4 / 3`
DISPLAYBOT=`expr $DISPLAYHEIGHT - $WINHEIGHT`
WINDOWS=`xdotool search --name http`
while [ -z "$WINDOWS" ] ; do
    WINDOWS=`xdotool search --name http`
    sleep 2
done
WINDOWS=`xdotool search --name http`
X=0
Y=0
sleep 10
for WINDOW in $WINDOWS ; do
    xdotool windowsize $WINDOW $WINWIDTH `expr $WINHEIGHT - $TITLEHEIGHT`
    sleep 2
    xdotool windowmove $WINDOW $X $Y
    sleep 2
    Y=`expr $Y + $WINHEIGHT`
    if [ $Y -gt $DISPLAYBOT ] ; then
        Y=0
        X=`expr $X + $WINWIDTH`
    fi
done
# Position the audio mixer
WINDOW=`xdotool search --name Meters`
xdotool windowmove $WINDOW $X $Y

